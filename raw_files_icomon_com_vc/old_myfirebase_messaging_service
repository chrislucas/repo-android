package com.project.icomoncomvc.service.firebase;

import android.app.Notification;
import android.app.NotificationManager;
import android.content.Intent;
import android.graphics.BitmapFactory;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Bundle;
import android.service.notification.StatusBarNotification;
import android.support.v4.app.NotificationCompat;
import android.support.v4.app.NotificationManagerCompat;
import android.support.v4.content.ContextCompat;
import android.support.v4.widget.DrawerLayout;
import android.util.Log;

import com.google.firebase.messaging.FirebaseMessagingService;
import com.google.firebase.messaging.RemoteMessage;
import com.project.icomoncomvc.R;
import com.project.icomoncomvc.activities.firebase.filters.FilterFirebaseMessage;
import com.project.icomoncomvc.activities.list.ActivityListPost;
import com.project.icomoncomvc.broadcast.ReceiverFilterNewPost;
import com.project.icomoncomvc.db.DbHelper;
import com.project.icomoncomvc.db.helper.TableHelperUser;
import com.project.icomoncomvc.utils.NotificationUtils;


import com.project.icomoncomvc.entities.User;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;

/**
 * Created by r028367 on 24/07/2017.
 */

public class MyFirebaseMessagingService extends FirebaseMessagingService {

    public static final Integer ID_NOTIFICATION = 0xf3;

    public static final String GROUP_NOTIFICATION = "FIREBASE_NOTIFICATION";

    @Override
    public void onMessageReceived(RemoteMessage remoteMessage) {
        super.onMessageReceived(remoteMessage);
        Map<String, String> data = remoteMessage.getData();
        RemoteMessage.Notification remoteMessageNotification= remoteMessage.getNotification();
        String from         = remoteMessage.getFrom();
        String to           = remoteMessage.getTo();
        String messageType  = remoteMessage.getMessageType();
        String idMessage    = remoteMessage.getMessageId();
        String bodyNotification = remoteMessageNotification.getBody();
        String titleNotification = remoteMessageNotification.getTitle();
        String action = remoteMessageNotification.getClickAction();
        String tag    = remoteMessageNotification.getTag();

        if(data != null && data.size() > 0) {
            String title = titleNotification; //data.get("data_title");
            String description = bodyNotification; //data.get("data_description");
            int id = Integer.parseInt(data.get("idArtigo"));

            Intent intent = new Intent(this, ActivityListInfo.class);
            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_CLEAR_TASK);

            //String channelGroup = getResources().getString(R.string.default_notification_channel_id);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                ArrayList<StatusBarNotification> notifications = new ArrayList<>();
                NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
                StatusBarNotification statusBarNotifications [] = notificationManager.getActiveNotifications();
                if(statusBarNotifications != null && statusBarNotifications.length > 0) {
                    /**
                     *
                     * Remover mensagens de notificacao da barra
                     * */
                    for(StatusBarNotification statusBarNotification : statusBarNotifications) {
                        int idNotification = statusBarNotification.getId();
                        notificationManager.cancel(idNotification);
                    }

                    /**
                     * Criar a notificacao que vai agrupar as outras
                     * */
                    creaateGroupNotification(intent, titleNotification, bodyNotification)
                    NotificationCompat.Builder groupBuilder = NotificationUtils.simpleNotificationDefault(this
                            , intent
                            , titleNotification
                            , bodyNotification, ID_NOTIFICATION);
                    groupBuilder.setAutoCancel(true);
                    groupBuilder.setGroupSummary(true);
                    groupBuilder.setGroup(GROUP_NOTIFICATION);

                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                        groupBuilder.setColor(ContextCompat.getColor(this, R.color.black));
                        groupBuilder.setSmallIcon(R.drawable.ic_notification);
                    }
                    else {
                        groupBuilder.setSmallIcon(R.drawable.ic_notification);
                    }

                    NotificationManagerCompat nm = NotificationManagerCompat.from(this);
                    int key = (int) (System.currentTimeMillis());
                    nm.notifitication(key, groupBuilder.build());

                    for(StatusBarNotification statusBarNotification : statusBarNotifications) {
                        Notification notification = statusBarNotification.getNotification();
                        String nTitle = notification.extras.getString(NotificationCompat.EXTRA_TITLE);
                        String nText = notification.extras.getString(NotificationCompat.EXTRA_INFO_TEXT);
                        NotificationCompat.Builder builder = NotificationUtils.simpleNotificationDefault(this
                                , intent
                                , nTitle
                                , nText
                                , ID_NOTIFICATION
                        );
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                            builder.setColor(ContextCompat.getColor(this, R.color.black));
                            builder.setSmallIcon(R.drawable.ic_notification);
                        }
                        else {
                            builder.setSmallIcon(R.drawable.ic_notification);
                        }
                        builder.setAutoCancel(true);
                        builder.setGroup(GROUP_NOTIFICATION);
                        key = (int) (System.currentTimeMillis());
                        nm.notifitication(key, builder.build());
                    }

                    NotificationCompat.Builder lastNotification = NotificationUtils.simpleNotificationDefault(this
                            , intent
                            , titleNotification
                            , bodyNotification
                            , ID_NOTIFICATION
                    );
                    lastNotification.setAutoCancel(true);
                    lastNotification.setGroup(GROUP_NOTIFICATION);
                    key = (int) (System.currentTimeMillis());
                    nm.notifitication(key, lastNotification.build());
                }
                // quando nao tem nenhuma mensagem na barra de notificacoes
                else {
                    build(intent, titleNotification, bodyNotification);
                }
            }
            else {
                build(intent, titleNotification, bodyNotification);
            }
        }
    }
    
    private void creaateGroupNotification(Intent intent, String titleNotification, String bodyNotification) {
        NotificationCompat.Builder groupBuilder = NotificationUtils.simpleNotificationDefault(this
                , intent
                , titleNotification
                , bodyNotification, ID_NOTIFICATION);
        groupBuilder.setAutoCancel(true);
        groupBuilder.setGroupSummary(true);
        groupBuilder.setGroup(GROUP_NOTIFICATION);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            groupBuilder.setColor(ContextCompat.getColor(this, R.color.black));
            groupBuilder.setSmallIcon(R.drawable.ic_notification);
        }
        else {
            groupBuilder.setSmallIcon(R.drawable.ic_notification);
        }
        NotificationManagerCompat nm = NotificationManagerCompat.from(this);
        int key = (int) (System.currentTimeMillis());
        nm.notifitication(key, groupBuilder.build());
    }
    
    private void createChildNotification(Intent intent, String titleNotification, String bodyNotification) {
        NotificationCompat.Builder builder = NotificationUtils.simpleNotificationDefault(
            this
            , intent
            , titleNotification
            , bodyNotification
            , ID_NOTIFICATION
        );
        builder.setAutoCancel(true);
        builder.setGroup(GROUP_NOTIFICATION);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            builder.setColor(ContextCompat.getColor(this, R.color.black));
            builder.setSmallIcon(R.drawable.ic_notification);
        }
        else {
            builder.setSmallIcon(R.drawable.ic_notification);
        }
        NotificationManagerCompat nm = NotificationManagerCompat.from(this);
        int key = (int) (System.currentTimeMillis());
        nm.notifitication(key, builder.build());
    }

    public void build(Intent intent, String titleNotification, String bodyNotification) {
        NotificationCompat.Builder groupBuilder = NotificationUtils.simpleNotificationDefault(this
                , intent
                , titleNotification
                , bodyNotification, ID_NOTIFICATION);
        groupBuilder.setAutoCancel(true);
        groupBuilder.setGroupSummary(true);
        groupBuilder.setGroup(GROUP_NOTIFICATION);

        NotificationCompat.Builder builder = NotificationUtils.simpleNotificationDefault(this
                , intent
                , titleNotification
                , bodyNotification
                , ID_NOTIFICATION
        );
        builder.setAutoCancel(true);
        builder.setGroup(GROUP_NOTIFICATION);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            //Drawable icon = ContextCompat.getDrawable(this, R.drawable.iconemsg);
            //icon.setColorFilter(ContextCompat.getColor(this, R.color.black), PorterDuff.Mode.MULTIPLY);
            groupBuilder.setColor(ContextCompat.getColor(this, R.color.black));
            groupBuilder.setSmallIcon(R.drawable.ic_notification);
            //groupBuilder.setLargeIcon(((BitmapDrawable) icon).getBitmap());

            builder.setColor(ContextCompat.getColor(this, R.color.black));
            builder.setSmallIcon(R.drawable.ic_notification);
            //builder.setLargeIcon(((BitmapDrawable) icon).getBitmap());
        }
        else {
            groupBuilder.setSmallIcon(R.drawable.ic_notification);
            builder.setSmallIcon(R.drawable.ic_notification);
        }

        NotificationManagerCompat nm = NotificationManagerCompat.from(this);
        //ntf.flags = NotificationCompat.FLAG_ONGOING_EVENT;
        //ntf.flags =  Notification.DEFAULT_LIGHTS | Notification.FLAG_AUTO_CANCEL;
        int key = (int) (System.currentTimeMillis());
        nm.notifitication(key, groupBuilder.build());
        key = (int) (System.currentTimeMillis());
        nm.notifitication(key, builder.build());
    }



    @Override
    public void onSendError(String s, Exception e) {
        super.onSendError(s, e);
    }
}
